
# coding: utf-8

# In[643]:


import argparse
import json
import os
import numpy
import utils
from utils import elementwise_mul
from task1 import write_image
import matplotlib.pyplot as plt


# In[644]:


def parse_args():
    parser = argparse.ArgumentParser(description="cse 473/573 project 1.")
    
    parser.add_argument(
        "--img_path", type=str, default="./data/proj1-task2-png.jpg",
        help="path to the image used for character detection (do not change this arg)")
    
    parser.add_argument(
        "--template_path", type=str, default="./data/",
        choices=["./data/a.jpg", "./data/b.jpg", "./data/c.jpg"],
        help="path to the template image")
    
    parser.add_argument(
        "--result_saving_directory", dest="rs_directory", type=str, default="./results/",
        help="directory to which results are saved (do not change this arg)")
    
    

    args = parser.parse_args()
    
    return args




# In[645]:


def read_image(img_path, show=False):
    """Reads an image into memory as a grayscale array.
    """
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    print(img.shape)
    if not img.dtype == np.uint8:
           pass

    if show:
        print(" inside show")
        show_image(img)

    img = [list(row) for row in img]
    return img


# In[646]:


# ta  = read_image("C:\\Users\\CSSKA\\Desktop\\CVIP\\CSE473573Project1\\CSE473-573-Project 1\\data\\a.jpg")
# tb  = read_image("C:\\Users\\CSSKA\\Desktop\\CVIP\\CSE473573Project1\\CSE473-573-Project 1\\data\\b.jpg")
# tc  = read_image("C:\\Users\\CSSKA\\Desktop\\CVIP\\CSE473573Project1\\CSE473-573-Project 1\\data\\c.jpg")
# img = read_image("C:\\Users\\CSSKA\\Desktop\\CVIP\\CSE473573Project1\\CSE473-573-Project 1\\data\\proj1-task2-png.png")


# In[695]:


def detect(img, template):
    """Detect a given character, i.e., the character in the template image.

    Args:
        img: nested list (int), image that contains character to be detected.
        template: nested list (int), template image.

    Returns:
        coordinates: list (tuple), a list whose elements are coordinates where the character appears.
            format of the tuple: (x (int), y (int)), x and y are integers.
            x: row that the character appears (starts from 0).
            y: column that the character appears (starts from 0).
    """
   
    img = np.asarray(img)
    template = np.asarray(template)
    dist = 0.5
    print(np.shape(img),np.shape(template))
    mean_2 =np.mean(template)
    mat2 = template - mean_2
    var2 = (np.sum(elementwise_mul(mat2,mat2)))
    l1 = []
    for i in range(img.shape[1]-template.shape[1]+1):
        for j in range(img.shape[0]-template.shape[0]+1): 
            patch =   img[j:j+template.shape[0],i:i+template.shape[1]]
            mat1  =  patch -  np.mean(patch)
            diff = (mat2 - mat1)
            num = np.sum(elementwise_mul(diff,diff))
            var1  =  (np.sum(elementwise_mul(mat1,mat1)))
            
            den   =  np.sqrt(var1*var2)
            dist1  =  ((num)/(den))
            if dist1 < 0.4:
                print((j,i), dist1)
                dist=dist1
                l1.append((j,i))
                plt.imshow(patch)
                plt.show()
    coordinates = l1
    return coordinates


# In[5]:


def save_results(coordinates, template, template_name, rs_directory):
    results = {}
    results["coordinates"] = sorted(coordinates, key=lambda x: x[0])
    results["templat_size"] = (len(template), len(template[0]))
    with open(os.path.join(rs_directory, template_name), "w") as file:
        json.dump(results, file)
        


# In[6]:


def main():
    args = parse_args()

    img = read_image(args.img_path)
    template = read_image(args.template_path)

    coordinates = detect(img, template)

    template_name = "{}.json".format(os.path.splitext(os.path.split(args.template_path)[1])[0])
    save_results(coordinates, template, template_name, args.rs_directory)


# In[7]:


if __name__ == "__main__":
    main()

